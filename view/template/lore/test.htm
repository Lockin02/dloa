<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<meta http-equiv="Content-Language" content="zh_cn" />
<meta http-equiv="Content-Type" content="text/html; charset=GB2312" />
<style type="text/css">@import url(js/plupload/css/plupload.queue.css);</style>  
<link rel="stylesheet" type="text/css" media="screen" href="images/style.css" />
<script type="text/javascript" src="js/jquery.js"></script>
<script type="text/javascript" src="js/plupload/js/gears_init.js"></script>
<script type="text/javascript" src="js/plupload/js/plupload.full.min.js"></script>  
<script type="text/javascript" src="js/plupload/js/jquery.plupload.queue.min.js"></script> 
<title></title>
</head>
<style>
.ui-jqgrid-sortable
{
	font-weight:normal;
	font-size:12px;
	height:24px;
}
.ui-jqgrid-title
{
	clear:both;
	font-size:12px;
	height:24px;
	line-height:20px;
}
.ui-helper-clearfix { height:24px; }
.ui-row-ltr td
{              
	border-top:0px #DDDDDD solid;
	border-left:0px #DDDDDD solid;
}
...table td {
 border:1px #DCEDF9 solid;
}
</style>
<body>
<form action="?model=lore_index&action=addposts" method="post">

<div id="uploader" style="width: 100%; height: 50px; " ></div>
</form>
 
<script type="text/javascript"> 
$(function() {
	    function log() {
	        var str = "";
	 
        plupload.each(arguments, function(arg) {
	            var row = "";
	 
	            if (typeof(arg) != "string") {
	                plupload.each(arg, function(value, key) {
	                    // Convert items in File objects to human readable form
	                    if (arg instanceof plupload.File) {
	                        // Convert status to human readable
                        switch (value) {
	                            case plupload.QUEUED:
	                                value = 'QUEUED';
	                                break;
	 
                            case plupload.UPLOADING:
	                                value = 'UPLOADING';
	                                break;
	 
	                            case plupload.FAILED:
                                value = 'FAILED';
	                                break;
	 
	                            case plupload.DONE:
	                                value = 'DONE';
	                                break;
	                        }
	                    }
	 
	                    if (typeof(value) != "function") {
	                        row += (row ? ', ' : '') + key + '=' + value;
	                    }
	                });
	 
	                str += row + " ";
	            } else {
	                str += arg + " ";
	            }
	        });
	 
	        $('#log').append(str + "\n");
	    }
	 
	    $("#uploader").pluploadQueue({
	        // General settings
	        runtimes : 'flash,gears,flash,silverlight,browserplus,html5',
	        url : 'upload.php',
	        max_file_size : '10mb',
	        chunk_size : '1mb',
	        unique_names : true,
	 
	        // Resize images on clientside if we can
	        resize : {width : 320, height : 240, quality : 90},
	 
        // Specify what files to browse for
	        filters : [
	            {title : "Image files", extensions : "jpg,gif,png"},
	            {title : "Zip files", extensions : "zip"}
	        ],
	 
	        // Flash settings
	        flash_swf_url : '/plupload/js/plupload.flash.swf',
	 
	        // Silverlight settings
	        silverlight_xap_url : '/plupload/js/plupload.silverlight.xap',
	 
        // PreInit events, bound before any internal events
	        preinit : {
	            Init: function(up, info) {
	                log('[Init]', 'Info:', info, 'Features:', up.features);
	            },
	 
	            UploadFile: function(up, file) {
	                log('[UploadFile]', file);
	 
	                // You can override settings before the file is uploaded
	                // up.settings.url = 'upload.php?id=' + file.id;
	                // up.settings.multipart_params = {param1 : 'value1', param2 : 'value2'};
	            }
	        },
	 
	        // Post init events, bound after the internal events
	        init : {
	            Refresh: function(up) {
	                // Called when upload shim is moved
                log('[Refresh]');
            },
	 
	            StateChanged: function(up) {
	                // Called when the state of the queue is changed
	                log('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
	            },
	 
	            QueueChanged: function(up) {
	                // Called when the files in queue are changed by adding/removing files
	                log('[QueueChanged]');
	            },
	 
	            UploadProgress: function(up, file) {
	                // Called while a file is being uploaded
	                log('[UploadProgress]', 'File:', file, "Total:", up.total);
	            },
	 
	            FilesAdded: function(up, files) {
	                // Callced when files are added to queue
	                log('[FilesAdded]');
	 
	                plupload.each(files, function(file) {
	                    log('  File:', file);
	                });
	            },
	 
	            FilesRemoved: function(up, files) {
	                // Called when files where removed from queue
	                log('[FilesRemoved]');
	 
	                plupload.each(files, function(file) {
	                    log('  File:', file);
	                });
	            },
	 
	            FileUploaded: function(up, file, info) {
	                // Called when a file has finished uploading
	                log('[FileUploaded] File:', file, "Info:", info);
            },
	 
	            ChunkUploaded: function(up, file, info) {
	                // Called when a file chunk has finished uploading
	                log('[ChunkUploaded] File:', file, "Info:", info);
	            },
	 
	            Error: function(up, args) {
	                // Called when a error has occured
	                log('[error] ', args);
            }
	        }
	    });
	});




















/*




$("#upfileid").bind("click", function(e){
		//$("#uploader").css('display','block');
		if($("#uploader").css('display')=='block'){
		  $("#uploader").fadeOut("slow"); 
		}else{
			$("#uploader").css('display','block'); 
		}
     });
$("#conform").bind("click", function(e){
		$("#cflag").val('conform');
    });
$("#save").bind("click", function(e){
		$("#cflag").val('save');
    });

var rand=Math.random()*100000;
timeview();
var most_num=4;//最多上传图片数量
var small=1;//是否生成缩略图1为是0为不生成
var count_num=0;
jQuery(document).ready(function() {  
 	$("#uploader").pluploadQueue({
								 url:'index1.php?model=lore_index&action=upfile&rand='+rand,
								 //runtimes: 'browserplus,flash,gears,html4,html5,silverlight',
								 runtimes: 'gears,html5,html4,flash,silverlight,browserplus',
								 //runtimes: 'browserplus,flash,gears,html4,html5,silverlight',
								 //runtimes : 'gears,flash,silverlight,browserplus,html5',  
								 max_file_size: '10mb',  
								 chunk_size: '1mb',  
								// unique_names: true,  
								 //resize: {width : 320, height : 150, quality : 90},  
								 /*filters: [  
									{title : "Image files", extensions : "jpg,gif,png"},  
									{title : "Zip files", extensions : "zip"}, 
									{title : "rar files", extensions : "rar"}  
								 ],*//*  
								 flash_swf_url : 'js/plupload/js/plupload.flash.swf',  
								 silverlight_xap_url : 'js/plupload/js/plupload.silverlight.xap'  
     });
	
 });	

function timeview()
{
	var T_today=new Date();
	timestr=T_today.toLocaleString();
	var strdate=T_today.getFullYear()+'-'+(T_today.getMonth()+1)+'-'+T_today.getDate();
	timestr=timestr.substr(timestr.indexOf(":")-2);
	$("#time_area").html(strdate+' '+timestr);
	T_today.setSeconds(T_today.getSeconds()+1);
	window.setTimeout( "timeview()", 1000 );
}
$("#search").bind("click", function(e){
		related=$("#relatedterms").val();
		if(related){								
		$.post('?model=lore_index&action=searchcorrelation',{rewords:related,rand:rand},
					function (data)
					{
						if(data)
						{
							$("#rewordtd").css('display','block');
							$("#rewordtd").css('white-space','normal');
							$("#rewordtd").html(data);
							var Count=0;	
							$("input[type='checkbox'][name='reterms[]']").bind("click", function(e){
																								 
								if($(this).attr("checked")){
									 Count++;
								}else{
									Count--;
								}													  
	
								if(Count>5){
									alert("此属性最多只能选5项！");
									$(this).removeAttr("checked"); 
									Count--;
								}
		
								});
						}else{
							$("#rewordtd").css('display','none');
							alert("无关联词");
						}
					 }
					);
		}
});
var CheckCount=0;
$("input[type='checkbox'][name='tag1[]']").click(function(){
	if($(this).attr("checked")){
	  CheckCount++;
	}else{
		CheckCount--;
		}													  
	
	if(CheckCount>4){
		alert("此属性最多只能选4项！");
			$(this).removeAttr("checked"); 
			CheckCount--;
		}
								
});
$("input[type='checkbox'][name='tag2[]']").click(function(){
	 if($(this).attr("checked")){
	  CheckCount++;
	}else{
		CheckCount--;
		}	
	if(CheckCount>4){
		alert("此属性最多只能选4项！");
			$(this).removeAttr("checked"); 
			CheckCount--;
		}
									
});
$("input[type='checkbox'][name='tag3[]']").click(function(){
		if($(this).attr("checked")){
	  CheckCount++;
	}else{
		CheckCount--;
		}	
    	if(CheckCount>4){
			alert("此属性最多只能选4项！");
			$(this).removeAttr("checked"); 
			CheckCount--;
		}
									
});

*/

</script>
</body>
</html>